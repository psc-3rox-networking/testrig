.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::Misc 3pm"
.TH Crypt::Misc 3pm "2016-11-28" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Misc \- miscellaneous functions related to (or used by) CryptX
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module contains a collection of mostly unsorted functions loosely-related to CryptX distribution but not implementing cryptography.
.PP
Most of them are also available in other perl modules but once you utilize CryptX you might avoid dependencies on other modules by using
functions from Crypt::Misc.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\& use Crypt::Misc \*(Aq:all\*(Aq;
\&
\& # Base64 and Base64/URL\-safe functions
\& $base64    = encode_b64($rawbytes);
\& $rawbytes  = decode_b64($base64);
\& $base64url = encode_b64u($encode_b64u);
\& $rawbytes  = decode_b64u($base64url);
\&
\& # read/write file
\& $rawdata = read_rawfile($filename);
\& write_rawfile($filename, $rawdata);
\&
\& # convert PEM/DER
\& $der_data = pem_to_der($pem_data);
\& $pem_data = der_to_pem($der_data);
\&
\&  # others
\&  die "mismatch" unless slow_eq($str1, $str2);
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
By default, Crypt::Misc doesn't import any function. You can import individual functions like this:
.PP
.Vb 1
\& use Crypt::Misc qw(read_rawfile);
.Ve
.PP
Or import all available functions:
.PP
.Vb 1
\& use Crypt::Misc \*(Aq:all\*(Aq;
.Ve
.SS "encode_b64"
.IX Subsection "encode_b64"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 1
\& $base64string = encode_b64($rawdata);
.Ve
.PP
Encode \f(CW$rawbytes\fR into Base64 string, no line-endings in the output string.
.SS "decode_b64"
.IX Subsection "decode_b64"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 1
\& $rawdata = encode_b64($base64string);
.Ve
.PP
Decode a Base64 string.
.SS "encode_b64u"
.IX Subsection "encode_b64u"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 1
\& $base64url_string = encode_b64($rawdata);
.Ve
.PP
Encode \f(CW$rawbytes\fR into Base64/URL\-Safe string, no line-endings in the output string.
.SS "decode_b64u"
.IX Subsection "decode_b64u"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 1
\& $rawdata = encode_b64($base64url_string);
.Ve
.PP
Decode a Base64/URL\-Safe string.
.SS "read_rawfile"
.IX Subsection "read_rawfile"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 1
\& $rawdata = read_rawfile($filename);
.Ve
.PP
Read file \f(CW$filename\fR into a scalar as a binary data (without decoding/transformation).
.SS "write_rawfile"
.IX Subsection "write_rawfile"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 1
\& write_rawfile($filename, $rawdata);
.Ve
.PP
Write \f(CW$rawdata\fR to file <$filename> as binary data.
.SS "slow_eq"
.IX Subsection "slow_eq"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 1
\& if (slow_eq($data1, $data2)) { ... }
.Ve
.PP
Constant time compare (to avoid timing side-channel).
.SS "pem_to_der"
.IX Subsection "pem_to_der"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 3
\&  $der_data = pem_to_der($pem_data);
\&  #or
\&  $der_data = pem_to_der($pem_data, $password);
.Ve
.PP
Convert \s-1PEM\s0 to \s-1DER\s0 representation. Supports also password protected \s-1PEM\s0 data.
.SS "der_to_pem"
.IX Subsection "der_to_pem"
\&\fISince: CryptX\-0.029\fR
.PP
.Vb 5
\&  $pem_data = der_to_pem($pem_data, $header_name);
\&  #or
\&  $pem_data = der_to_pem($pem_data, $header_name, $password);
\&  #or
\&  $pem_data = der_to_pem($pem_data, $header_name, $passord, $cipher_name);
\&
\&  # $header_name e.g. "PUBLIC KEY", "RSA PRIVATE KEY" ...
\&  # $cipher_name e.g. "DES\-EDE3\-CBC", "AES\-256\-CBC" (DEFAULT) ...
.Ve
.PP
Convert \s-1DER\s0 to \s-1PEM\s0 representation. Supports also password protected \s-1PEM\s0 data.
.SS "random_v4uuid"
.IX Subsection "random_v4uuid"
\&\fISince: CryptX\-0.031\fR
.PP
.Vb 1
\& my $uuid = random_v4uuid();
.Ve
.PP
Returns cryptographically strong Version 4 random \s-1UUID: \s0\f(CW\*(C`xxxxxxxx\-xxxx\-4xxx\-Yxxx\-xxxxxxxxxxxx\*(C'\fR
where \f(CW\*(C`x\*(C'\fR is any hexadecimal digit and \f(CW\*(C`Y\*(C'\fR is one of 8, 9, A, B (1000, 1001, 1010, 1011)
e.g. \f(CW\*(C`f47ac10b\-58cc\-4372\-a567\-0e02b2c3d479\*(C'\fR.
.SS "is_v4uuid"
.IX Subsection "is_v4uuid"
\&\fISince: CryptX\-0.031\fR
.PP
.Vb 3
\&  if (is_v4uuid($uuid)) {
\&    ...
\&  }
.Ve
.PP
Checks the given \f(CW$uuid\fR string whether it matches V4 \s-1UUID\s0 format and returns \f(CW0\fR (mismatch) or \f(CW1\fR (match).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CryptX
