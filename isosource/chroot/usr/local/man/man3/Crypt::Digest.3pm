.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::Digest 3pm"
.TH Crypt::Digest 3pm "2016-11-28" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Digest \- Generic interface to hash/digest functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   ### Functional interface:
\&   use Crypt::Digest qw( digest_data digest_data_hex digest_data_b64 digest_data_b64u
\&                         digest_file digest_file_hex digest_file_b64 digest_file_b64u );
\&
\&   # calculate digest from string/buffer
\&   $digest_raw  = digest_data(\*(AqSHA1\*(Aq, \*(Aqdata string\*(Aq);
\&   $digest_hex  = digest_data_hex(\*(AqSHA1\*(Aq, \*(Aqdata string\*(Aq);
\&   $digest_b64  = digest_data_b64(\*(AqSHA1\*(Aq, \*(Aqdata string\*(Aq);
\&   $digest_b64u = digest_data_b64u(\*(AqSHA1\*(Aq, \*(Aqdata string\*(Aq);
\&   # calculate digest from file
\&   $digest_raw  = digest_file(\*(AqSHA1\*(Aq, \*(Aqfilename.dat\*(Aq);
\&   $digest_hex  = digest_file_hex(\*(AqSHA1\*(Aq, \*(Aqfilename.dat\*(Aq);
\&   $digest_b64  = digest_file_b64(\*(AqSHA1\*(Aq, \*(Aqfilename.dat\*(Aq);
\&   $digest_b64u = digest_file_b64u(\*(AqSHA1\*(Aq, \*(Aqfilename.dat\*(Aq);
\&   # calculate digest from filehandle
\&   $digest_raw  = digest_file(\*(AqSHA1\*(Aq, *FILEHANDLE);
\&   $digest_hex  = digest_file_hex(\*(AqSHA1\*(Aq, *FILEHANDLE);
\&   $digest_b64  = digest_file_b64(\*(AqSHA1\*(Aq, *FILEHANDLE);
\&   $digest_b64u = digest_file_b64u(\*(AqSHA1\*(Aq, *FILEHANDLE);
\&
\&   ### OO interface:
\&   use Crypt::Digest;
\&
\&   $d = Crypt::Digest\->new(\*(AqSHA1\*(Aq);
\&   $d\->add(\*(Aqany data\*(Aq);
\&   $d\->addfile(\*(Aqfilename.dat\*(Aq);
\&   $d\->addfile(*FILEHANDLE);
\&   $result_raw  = $d\->digest;     # raw bytes
\&   $result_hex  = $d\->hexdigest;  # hexadecimal form
\&   $result_b64  = $d\->b64digest;  # Base64 form
\&   $result_b64u = $d\->b64udigest; # Base64 URL Safe form
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides an interface to various hash/digest algorithms.
.SH "EXPORT"
.IX Header "EXPORT"
Nothing is exported by default.
.PP
You can export selected functions:
.PP
.Vb 2
\&  use Crypt::Digest qw( digest_data digest_data_hex digest_data_b64 digest_data_b64u
\&                        digest_file digest_file_hex digest_file_b64 digest_file_b64u );
.Ve
.PP
Or all of them at once:
.PP
.Vb 1
\&  use Crypt::Digest \*(Aq:all\*(Aq;
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Please note that all functions take as its first argument the algoritm name, supported values are:
.PP
.Vb 3
\& \*(AqCHAES\*(Aq, \*(AqMD2\*(Aq, \*(AqMD4\*(Aq, \*(AqMD5\*(Aq, \*(AqRIPEMD128\*(Aq, \*(AqRIPEMD160\*(Aq,
\& \*(AqRIPEMD256\*(Aq, \*(AqRIPEMD320\*(Aq, \*(AqSHA1\*(Aq, \*(AqSHA224\*(Aq, \*(AqSHA256\*(Aq,
\& \*(AqSHA384\*(Aq, \*(AqSHA512\*(Aq, \*(AqSHA512_224\*(Aq, \*(AqSHA512_256\*(Aq, \*(AqTiger192\*(Aq, \*(AqWhirlpool\*(Aq
\&
\& (simply any <FUNCNAME> for which there is Crypt::Digest::<FUNCNAME> module)
.Ve
.SS "digest_data"
.IX Subsection "digest_data"
Logically joins all arguments into a single string, and returns its \s-1SHA1\s0 digest encoded as a binary string.
.PP
.Vb 3
\& $digest_raw = digest_data(\*(AqSHA1\*(Aq, \*(Aqdata string\*(Aq);
\& #or
\& $digest_raw = digest_data(\*(AqSHA1\*(Aq, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "digest_data_hex"
.IX Subsection "digest_data_hex"
Logically joins all arguments into a single string, and returns its \s-1SHA1\s0 digest encoded as a hexadecimal string.
.PP
.Vb 3
\& $digest_hex = digest_data_hex(\*(AqSHA1\*(Aq, \*(Aqdata string\*(Aq);
\& #or
\& $digest_hex = digest_data_hex(\*(AqSHA1\*(Aq, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "digest_data_b64"
.IX Subsection "digest_data_b64"
Logically joins all arguments into a single string, and returns its \s-1SHA1\s0 digest encoded as a Base64 string, \fBwith\fR trailing '=' padding.
.PP
.Vb 3
\& $digest_b64 = digest_data_b64(\*(AqSHA1\*(Aq, \*(Aqdata string\*(Aq);
\& #or
\& $digest_b64 = digest_data_b64(\*(AqSHA1\*(Aq, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "digest_data_b64u"
.IX Subsection "digest_data_b64u"
Logically joins all arguments into a single string, and returns its \s-1SHA1\s0 digest encoded as a Base64 \s-1URL\s0 Safe string (see \s-1RFC 4648\s0 section 5).
.PP
.Vb 3
\& $digest_b64url = digest_data_b64u(\*(AqSHA1\*(Aq, \*(Aqdata string\*(Aq);
\& #or
\& $digest_b64url = digest_data_b64u(\*(AqSHA1\*(Aq, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "digest_file"
.IX Subsection "digest_file"
Reads file (defined by filename or filehandle) content, and returns its digest encoded as a binary string.
.PP
.Vb 3
\& $digest_raw = digest_file(\*(AqSHA1\*(Aq, \*(Aqfilename.dat\*(Aq);
\& #or
\& $digest_raw = digest_file(\*(AqSHA1\*(Aq, *FILEHANDLE);
.Ve
.SS "digest_file_hex"
.IX Subsection "digest_file_hex"
Reads file (defined by filename or filehandle) content, and returns its digest encoded as a hexadecimal string.
.PP
.Vb 3
\& $digest_hex = digest_file_hex(\*(AqSHA1\*(Aq, \*(Aqfilename.dat\*(Aq);
\& #or
\& $digest_hex = digest_file_hex(\*(AqSHA1\*(Aq, *FILEHANDLE);
.Ve
.PP
\&\fB\s-1BEWARE:\s0\fR You have to make sure that the filehandle is in binary mode before you pass it as argument to the \fIaddfile()\fR method.
.SS "digest_file_b64"
.IX Subsection "digest_file_b64"
Reads file (defined by filename or filehandle) content, and returns its digest encoded as a Base64 string, \fBwith\fR trailing '=' padding.
.PP
.Vb 3
\& $digest_b64 = digest_file_b64(\*(AqSHA1\*(Aq, \*(Aqfilename.dat\*(Aq);
\& #or
\& $digest_b64 = digest_file_b64(\*(AqSHA1\*(Aq, *FILEHANDLE);
.Ve
.SS "digest_file_b64u"
.IX Subsection "digest_file_b64u"
Reads file (defined by filename or filehandle) content, and returns its digest encoded as a Base64 \s-1URL\s0 Safe string (see \s-1RFC 4648\s0 section 5).
.PP
.Vb 3
\& $digest_b64url = digest_file_b64u(\*(AqSHA1\*(Aq, \*(Aqfilename.dat\*(Aq);
\& #or
\& $digest_b64url = digest_file_b64u(\*(AqSHA1\*(Aq, *FILEHANDLE);
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Constructor, returns a reference to the digest object.
.PP
.Vb 6
\& $d = Crypt::Digest\->new($name);
\& # $name could be: \*(AqCHAES\*(Aq, \*(AqMD2\*(Aq, \*(AqMD4\*(Aq, \*(AqMD5\*(Aq, \*(AqRIPEMD128\*(Aq, \*(AqRIPEMD160\*(Aq,
\& #                 \*(AqRIPEMD256\*(Aq, \*(AqRIPEMD320\*(Aq, \*(AqSHA1\*(Aq, \*(AqSHA224\*(Aq, \*(AqSHA256\*(Aq, \*(AqSHA384\*(Aq,
\& #                 \*(AqSHA512\*(Aq, \*(AqSHA512_224\*(Aq, \*(AqSHA512_256\*(Aq, \*(AqTiger192\*(Aq, \*(AqWhirlpool\*(Aq
\& #
\& # simply any <FUNCNAME> for which there is Crypt::Digest::<FUNCNAME> module
.Ve
.SS "clone"
.IX Subsection "clone"
Creates a copy of the digest object state and returns a reference to the copy.
.PP
.Vb 1
\& $d\->clone();
.Ve
.SS "reset"
.IX Subsection "reset"
Reinitialize the digest object state and returns a reference to the digest object.
.PP
.Vb 1
\& $d\->reset();
.Ve
.SS "add"
.IX Subsection "add"
All arguments are appended to the message we calculate digest for.
The return value is the digest object itself.
.PP
.Vb 3
\& $d\->add(\*(Aqany data\*(Aq);
\& #or
\& $d\->add(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.PP
Note that all the following cases are equivalent:
.PP
.Vb 2
\& # case 1
\& $d\->add(\*(Aqaa\*(Aq, \*(Aqbb\*(Aq, \*(Aqcc\*(Aq);
\&
\& # case 2
\& $d\->add(\*(Aqaa\*(Aq);
\& $d\->add(\*(Aqbb\*(Aq);
\& $d\->add(\*(Aqcc\*(Aq);
\&
\& # case 3
\& $d\->add(\*(Aqaabbcc\*(Aq);
\&
\& # case 4
\& $d\->add(\*(Aqaa\*(Aq)\->add(\*(Aqbb\*(Aq)\->add(\*(Aqcc\*(Aq);
.Ve
.SS "addfile"
.IX Subsection "addfile"
The content of the file (or filehandle) is appended to the message we calculate digest for.
The return value is the digest object itself.
.PP
.Vb 3
\& $d\->addfile(\*(Aqfilename.dat\*(Aq);
\& #or
\& $d\->addfile(*FILEHANDLE);
.Ve
.PP
\&\fB\s-1BEWARE:\s0\fR You have to make sure that the filehandle is in binary mode before you pass it as argument to the \fIaddfile()\fR method.
.SS "add_bits"
.IX Subsection "add_bits"
This method is available mostly for compatibility with other Digest::SOMETHING modules on \s-1CPAN,\s0 you are very unlikely to need it.
The return value is the digest object itself.
.PP
.Vb 3
\& $d\->add_bits($bit_string);   # e.g. $d\->add_bits("111100001010");
\& #or
\& $d\->add_bits($data, $nbits); # e.g. $d\->add_bits("\exF0\exA0", 16);
.Ve
.PP
\&\fB\s-1BEWARE:\s0\fR It is not possible to add bits that are not a multiple of 8.
.SS "hashsize"
.IX Subsection "hashsize"
Returns the length of calculated digest in bytes (e.g. 32 for \s-1SHA\-256\s0).
.PP
.Vb 5
\& $d\->hashsize;
\& #or
\& Crypt::Digest\->hashsize(\*(AqSHA1\*(Aq);
\& #or
\& Crypt::Digest::hashsize(\*(AqSHA1\*(Aq);
.Ve
.SS "digest"
.IX Subsection "digest"
Returns the binary digest (raw bytes).
.PP
.Vb 1
\& $result_raw = $d\->digest();
.Ve
.SS "hexdigest"
.IX Subsection "hexdigest"
Returns the digest encoded as a hexadecimal string.
.PP
.Vb 1
\& $result_hex = $d\->hexdigest();
.Ve
.SS "b64digest"
.IX Subsection "b64digest"
Returns the digest encoded as a Base64 string, \fBwith\fR trailing '=' padding (\fB\s-1BEWARE:\s0\fR this padding
style might differ from other Digest::SOMETHING modules on \s-1CPAN\s0).
.PP
.Vb 1
\& $result_b64 = $d\->b64digest();
.Ve
.SS "b64udigest"
.IX Subsection "b64udigest"
Returns the digest encoded as a Base64 \s-1URL\s0 Safe string (see \s-1RFC 4648\s0 section 5).
.PP
.Vb 1
\& $result_b64url = $d\->b64udigest();
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CryptX
.IP "\(bu" 4
Crypt::Digest tries to be compatible with Digest interface.
.IP "\(bu" 4
Check subclasses like Crypt::Digest::SHA1, Crypt::Digest::MD5, ...
