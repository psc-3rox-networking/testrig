.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::PK::DH 3pm"
.TH Crypt::PK::DH 3pm "2016-11-28" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::PK::DH \- Public key cryptography based on Diffie\-Hellman
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& ### OO interface
\&
\& #Encryption: Alice
\& my $pub = Crypt::PK::DH\->new(\*(AqBob_pub_dh1.key\*(Aq);
\& my $ct = $pub\->encrypt("secret message");
\& #
\& #Encryption: Bob (received ciphertext $ct)
\& my $priv = Crypt::PK::DH\->new(\*(AqBob_priv_dh1.key\*(Aq);
\& my $pt = $priv\->decrypt($ct);
\&
\& #Signature: Alice
\& my $priv = Crypt::PK::DH\->new(\*(AqAlice_priv_dh1.key\*(Aq);
\& my $sig = $priv\->sign_message($message);
\& #
\& #Signature: Bob (received $message + $sig)
\& my $pub = Crypt::PK::DH\->new(\*(AqAlice_pub_dh1.key\*(Aq);
\& $pub\->verify_message($sig, $message) or die "ERROR";
\&
\& #Shared secret
\& my $priv = Crypt::PK::DH\->new(\*(AqAlice_priv_dh1.key\*(Aq);
\& my $pub = Crypt::PK::DH\->new(\*(AqBob_pub_dh1.key\*(Aq);
\& my $shared_secret = $priv\->shared_secret($pub);
\&
\& #Key generation
\& my $pk = Crypt::PK::DH\->new();
\& $pk\->generate_key(128);
\& my $private = $pk\->export_key(\*(Aqprivate\*(Aq);
\& my $public = $pk\->export_key(\*(Aqpublic\*(Aq);
\&
\& or
\&
\& my $pk = Crypt::PK::DH\->new();
\& $pk\->generate_key(\*(Aqike2048\*(Aq);
\& my $private = $pk\->export_key(\*(Aqprivate\*(Aq);
\& my $public = $pk\->export_key(\*(Aqpublic\*(Aq);
\&
\& or
\&
\& my $pk = Crypt::PK::DH\->new();
\& $pk\->generate_key({ p => $p, g => $g });
\& my $private = $pk\->export_key(\*(Aqprivate\*(Aq);
\& my $public = $pk\->export_key(\*(Aqpublic\*(Aq);
\&
\& ### Functional interface
\&
\& #Encryption: Alice
\& my $ct = dh_encrypt(\*(AqBob_pub_dh1.key\*(Aq, "secret message");
\& #Encryption: Bob (received ciphertext $ct)
\& my $pt = dh_decrypt(\*(AqBob_priv_dh1.key\*(Aq, $ct);
\&
\& #Signature: Alice
\& my $sig = dh_sign_message(\*(AqAlice_priv_dh1.key\*(Aq, $message);
\& #Signature: Bob (received $message + $sig)
\& dh_verify_message(\*(AqAlice_pub_dh1.key\*(Aq, $sig, $message) or die "ERROR";
\&
\& #Shared secret
\& my $shared_secret = dh_shared_secret(\*(AqAlice_priv_dh1.key\*(Aq, \*(AqBob_pub_dh1.key\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 5
\&  my $pk = Crypt::PK::DH\->new();
\&  #or
\&  my $pk = Crypt::PK::DH\->new($priv_or_pub_key_filename);
\&  #or
\&  my $pk = Crypt::PK::DH\->new(\e$buffer_containing_priv_or_pub_key);
.Ve
.SS "generate_key"
.IX Subsection "generate_key"
Uses Yarrow-based cryptographically strong random number generator seeded with
random data taken from \f(CW\*(C`/dev/random\*(C'\fR (\s-1UNIX\s0) or \f(CW\*(C`CryptGenRandom\*(C'\fR (Win32).
.PP
.Vb 11
\& $pk\->generate_key($keysize);
\& ### $keysize (in bytes) corresponds to DH params (p, g) predefined by libtomcrypt
\& # 96   =>  DH\-768
\& # 128  =>  DH\-1024
\& # 160  =>  DH\-1280
\& # 192  =>  DH\-1536
\& # 224  =>  DH\-1792
\& # 256  =>  DH\-2048
\& # 320  =>  DH\-2560
\& # 384  =>  DH\-3072
\& # 512  =>  DH\-4096
.Ve
.PP
The following variants are available since CryptX\-0.032
.PP
.Vb 10
\& $pk\->generate_key($name)
\& ### $name corresponds to values defined in RFC7296 and RFC3526
\& # ike768  =>  768\-bit MODP (Group 1)
\& # ike1024 => 1024\-bit MODP (Group 2)
\& # ike1536 => 1536\-bit MODP (Group 5)
\& # ike2048 => 2048\-bit MODP (Group 14)
\& # ike3072 => 3072\-bit MODP (Group 15)
\& # ike4096 => 4096\-bit MODP (Group 16)
\& # ike6144 => 6144\-bit MODP (Group 17)
\& # ike8192 => 8192\-bit MODP (Group 18)
\&
\& $pk\->generate_key($param_hash)
\& ## $param_hash is { g => $g, p => $p }
\& ## where $g is the generator (base) in a hex string and $p is the prime in a hex string
.Ve
.SS "import_key"
.IX Subsection "import_key"
Loads private or public key (exported by \*(L"export_key\*(R").
.PP
.Vb 3
\&  $pk\->import_key($filename);
\&  #or
\&  $pk\->import_key(\e$buffer_containing_key);
.Ve
.SS "import_key_raw"
.IX Subsection "import_key_raw"
\&\fISince: CryptX\-0.032\fR
.PP
.Vb 5
\&  $pk\->import_key_raw($raw_bytes, $type, $params)
\&  ### $raw_bytes is a binary string containing the key
\&  ### $type is either \*(Aqprivate\*(Aq or \*(Aqpublic\*(Aq
\&  ### $param is either a name (\*(Aqike2038\*(Aq) or hash containing the p,g values { g=>$g, p=>$p }
\&  ### in hex strings
.Ve
.SS "export_key"
.IX Subsection "export_key"
.Vb 3
\& my $private = $pk\->export_key(\*(Aqprivate\*(Aq);
\& #or
\& my $public = $pk\->export_key(\*(Aqpublic\*(Aq);
.Ve
.SS "export_key_raw"
.IX Subsection "export_key_raw"
\&\fISince: CryptX\-0.032\fR
.PP
.Vb 3
\& $raw_bytes = $dh\->export_key_raw(\*(Aqpublic\*(Aq)
\& #or
\& $raw_bytes = $dh\->export_key_raw(\*(Aqprivate\*(Aq)
.Ve
.SS "encrypt"
.IX Subsection "encrypt"
.Vb 4
\& my $pk = Crypt::PK::DH\->new($pub_key_filename);
\& my $ct = $pk\->encrypt($message);
\& #or
\& my $ct = $pk\->encrypt($message, $hash_name);
\&
\& #NOTE: $hash_name can be \*(AqSHA1\*(Aq (DEFAULT), \*(AqSHA256\*(Aq or any other hash supported by Crypt::Digest
.Ve
.SS "decrypt"
.IX Subsection "decrypt"
.Vb 2
\& my $pk = Crypt::PK::DH\->new($priv_key_filename);
\& my $pt = $pk\->decrypt($ciphertext);
.Ve
.SS "sign_message"
.IX Subsection "sign_message"
.Vb 4
\& my $pk = Crypt::PK::DH\->new($priv_key_filename);
\& my $signature = $priv\->sign_message($message);
\& #or
\& my $signature = $priv\->sign_message($message, $hash_name);
\&
\& #NOTE: $hash_name can be \*(AqSHA1\*(Aq (DEFAULT), \*(AqSHA256\*(Aq or any other hash supported by Crypt::Digest
.Ve
.SS "verify_message"
.IX Subsection "verify_message"
.Vb 4
\& my $pk = Crypt::PK::DH\->new($pub_key_filename);
\& my $valid = $pub\->verify_message($signature, $message)
\& #or
\& my $valid = $pub\->verify_message($signature, $message, $hash_name);
\&
\& #NOTE: $hash_name can be \*(AqSHA1\*(Aq (DEFAULT), \*(AqSHA256\*(Aq or any other hash supported by Crypt::Digest
.Ve
.SS "sign_hash"
.IX Subsection "sign_hash"
.Vb 2
\& my $pk = Crypt::PK::DH\->new($priv_key_filename);
\& my $signature = $priv\->sign_hash($message_hash);
.Ve
.SS "verify_hash"
.IX Subsection "verify_hash"
.Vb 2
\& my $pk = Crypt::PK::DH\->new($pub_key_filename);
\& my $valid = $pub\->verify_hash($signature, $message_hash);
.Ve
.SS "shared_secret"
.IX Subsection "shared_secret"
.Vb 4
\& # Alice having her priv key $pk and Bob\*(Aqs public key $pkb
\& my $pk  = Crypt::PK::DH\->new($priv_key_filename);
\& my $pkb = Crypt::PK::DH\->new($pub_key_filename);
\& my $shared_secret = $pk\->shared_secret($pkb);
\&
\& # Bob having his priv key $pk and Alice\*(Aqs public key $pka
\& my $pk = Crypt::PK::DH\->new($priv_key_filename);
\& my $pka = Crypt::PK::DH\->new($pub_key_filename);
\& my $shared_secret = $pk\->shared_secret($pka);  # same value as computed by Alice
.Ve
.SS "is_private"
.IX Subsection "is_private"
.Vb 4
\& my $rv = $pk\->is_private;
\& # 1 .. private key loaded
\& # 0 .. public key loaded
\& # undef .. no key loaded
.Ve
.SS "size"
.IX Subsection "size"
.Vb 2
\& my $size = $pk\->size;
\& # returns key size in bytes or undef if no key loaded
.Ve
.SS "key2hash"
.IX Subsection "key2hash"
.Vb 1
\& my $hash = $pk\->key2hash;
\&
\& # returns hash like this (or undef if no key loaded):
\& {
\&   type => 0,   # integer: 1 .. private, 0 .. public
\&   size => 256, # integer: key size in bytes
\&   x => "FBC1062F73B9A17BB8473A2F5A074911FA7F20D28FB...", #private key
\&   y => "AB9AAA40774D3CD476B52F82E7EE2D8A8D40CD88BF4...", #public key
\&   g => "2", # generator/base
\&   p => "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80D...", # prime
\&}
.Ve
.SS "params2hash"
.IX Subsection "params2hash"
\&\fISince: CryptX\-0.032\fR
.PP
.Vb 1
\& my $params = $pk\->params2hash;
\&
\& # returns hash like this (or undef if no key loaded):
\& {
\&   g => "2", # generator/base
\&   p => "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80D...", # prime
\&}
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "dh_encrypt"
.IX Subsection "dh_encrypt"
\&\s-1DH\s0 based encryption as implemented by libtomcrypt. See method \*(L"encrypt\*(R" below.
.PP
.Vb 5
\& my $ct = dh_encrypt($pub_key_filename, $message);
\& #or
\& my $ct = dh_encrypt(\e$buffer_containing_pub_key, $message);
\& #or
\& my $ct = dh_encrypt($pub_key_filename, $message, $hash_name);
\&
\& #NOTE: $hash_name can be \*(AqSHA1\*(Aq (DEFAULT), \*(AqSHA256\*(Aq or any other hash supported by Crypt::Digest
.Ve
.PP
Encryption works similar to the Crypt::PK::ECC encryption whereas shared \s-1DH\s0 key is computed, and
the hash of the shared key \s-1XOR\s0'ed against the plaintext forms the ciphertext.
.SS "dh_decrypt"
.IX Subsection "dh_decrypt"
\&\s-1DH\s0 based decryption as implemented by libtomcrypt. See method \*(L"decrypt\*(R" below.
.PP
.Vb 3
\& my $pt = dh_decrypt($priv_key_filename, $ciphertext);
\& #or
\& my $pt = dh_decrypt(\e$buffer_containing_priv_key, $ciphertext);
.Ve
.SS "dh_sign_message"
.IX Subsection "dh_sign_message"
Generate \s-1DH\s0 signature as implemented by libtomcrypt. See method \*(L"sign_message\*(R" below.
.PP
.Vb 5
\& my $sig = dh_sign_message($priv_key_filename, $message);
\& #or
\& my $sig = dh_sign_message(\e$buffer_containing_priv_key, $message);
\& #or
\& my $sig = dh_sign_message($priv_key, $message, $hash_name);
.Ve
.SS "dh_verify_message"
.IX Subsection "dh_verify_message"
Verify \s-1DH\s0 signature as implemented by libtomcrypt. See method \*(L"verify_message\*(R" below.
.PP
.Vb 5
\& dh_verify_message($pub_key_filename, $signature, $message) or die "ERROR";
\& #or
\& dh_verify_message(\e$buffer_containing_pub_key, $signature, $message) or die "ERROR";
\& #or
\& dh_verify_message($pub_key, $signature, $message, $hash_name) or die "ERROR";
.Ve
.SS "dh_sign_hash"
.IX Subsection "dh_sign_hash"
Generate \s-1DH\s0 signature as implemented by libtomcrypt. See method \*(L"sign_hash\*(R" below.
.PP
.Vb 3
\& my $sig = dh_sign_hash($priv_key_filename, $message_hash);
\& #or
\& my $sig = dh_sign_hash(\e$buffer_containing_priv_key, $message_hash);
.Ve
.SS "dh_verify_hash"
.IX Subsection "dh_verify_hash"
Verify \s-1DH\s0 signature as implemented by libtomcrypt. See method \*(L"verify_hash\*(R" below.
.PP
.Vb 3
\& dh_verify_hash($pub_key_filename, $signature, $message_hash) or die "ERROR";
\& #or
\& dh_verify_hash(\e$buffer_containing_pub_key, $signature, $message_hash) or die "ERROR";
.Ve
.SS "dh_shared_secret"
.IX Subsection "dh_shared_secret"
\&\s-1DH\s0 based shared secret generation. See method \*(L"shared_secret\*(R" below.
.PP
.Vb 2
\& #on Alice side
\& my $shared_secret = dh_shared_secret(\*(AqAlice_priv_dh1.key\*(Aq, \*(AqBob_pub_dh1.key\*(Aq);
\&
\& #on Bob side
\& my $shared_secret = dh_shared_secret(\*(AqBob_priv_dh1.key\*(Aq, \*(AqAlice_pub_dh1.key\*(Aq);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
<https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange>
